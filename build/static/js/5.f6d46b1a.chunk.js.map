{"version":3,"sources":["hooks/useLoginSubmit.js","assets/img/forgot-password-office.jpeg","assets/img/forgot-password-office-dark.jpeg","pages/ForgotPassword.js"],"names":["useLoginSubmit","loading","setLoading","useState","dispatch","useContext","AdminContext","history","useHistory","location","useLocation","register","handleSubmit","formState","errors","useForm","onSubmit","_ref","name","email","verifyEmail","password","role","pathname","AdminServices","loginAdmin","then","res","token","console","log","Cookies","set","JSON","stringify","expires","notifySuccess","type","payload","localStorage","setItem","replace","catch","err","error","notifyError","response","data","message","registerAdmin","forgetPassword","ForgotPassword","_jsx","className","children","_jsxs","src","ImageLight","alt","ImageDark","LabelArea","label","InputArea","placeholder","Error","errorName","Button","disabled","block","Link","to"],"mappings":"uHAAA,oEAgLeA,IA9EQA,KACrB,MAAOC,EAASC,GAAcC,oBAAS,IACjC,SAAEC,GAAaC,qBAAWC,KAC1BC,EAAUC,cACVC,EAAWC,eACX,SACJC,EAAQ,aACRC,EACAC,WAAW,OAAEC,IACXC,cA4DJ,MAAO,CACLC,SA3DeC,IAAmD,IAAlD,KAAEC,EAAI,MAAEC,EAAK,YAAEC,EAAW,SAAEC,EAAQ,KAAEC,GAAML,EAC5Df,GAAW,GAGe,WAAtBO,EAASc,UACXC,IAAcC,WAAW,CAAEN,QAAOE,aAC/BK,MAAMC,IACDA,GAAOA,EAAIC,QACbC,QAAQC,IAAI,kBAAmBH,GAC/BI,IAAQC,IAAI,YAAaC,KAAKC,UAAUP,GAAM,CAC5CQ,QARY,KAUdjC,GAAW,GACXkC,YAAc,kBAEdhC,EAAS,CAAEiC,KAAM,aAAcC,QAAS,CAAEV,MAAOD,EAAIC,SACrDW,aAAaC,QAAQ,QAASrB,GAC9BZ,EAAQkC,QAAQ,KAClB,IAEDC,OAAOC,IACNd,QAAQe,MAAM,eAAgBD,GAC9BE,YAAYF,EAAMA,EAAIG,SAASC,KAAKC,QAAUL,EAAIK,SAClD9C,GAAW,EAAM,IAIG,YAAtBO,EAASc,UACXC,IAAcyB,cAAc,CAAE/B,OAAMC,QAAOE,WAAUC,SAClDI,MAAMC,IACDA,IACFzB,GAAW,GACXkC,YAAc,qBACdhC,EAAS,CAAEiC,KAAM,aAAcC,QAASX,IACxCI,IAAQC,IAAI,YAAaC,KAAKC,UAAUP,GAAM,CAC5CQ,QAjCY,KAmCd5B,EAAQkC,QAAQ,KAClB,IAEDC,OAAOC,IACNE,YAAYF,EAAMA,EAAIG,SAASC,KAAKC,QAAUL,EAAIK,SAClD9C,GAAW,EAAM,IAIG,qBAAtBO,EAASc,UACXC,IAAc0B,eAAe,CAAE9B,gBAC5BM,MAAMC,IACLzB,GAAW,GACXkC,YAAcT,EAAIqB,QAAQ,IAE3BN,OAAOC,IACNzC,GAAW,GACX2C,YAAYF,EAAMA,EAAIG,SAASC,KAAKC,QAAUL,EAAIK,QAAQ,GAEhE,EAIArC,WACAC,eACAE,SACAb,UACD,C,oCC7KY,QAA0B,mD,oCCA1B,QAA0B,wD,oCCAzC,4FAqEekD,UA1DQA,KACrB,MAAM,SAAEnC,EAAQ,SAAEL,EAAQ,aAAEC,EAAY,OAAEE,EAAM,QAAEb,GAAYD,cAE9D,OACEoD,cAAA,OAAKC,UAAU,iEAAgEC,SAC7EF,cAAA,OAAKC,UAAU,iGAAgGC,SAC7GC,eAAA,OAAKF,UAAU,4CAA2CC,SAAA,CACxDC,eAAA,OAAKF,UAAU,0BAAyBC,SAAA,CACtCF,cAAA,OACE,cAAY,OACZC,UAAU,yCACVG,IAAKC,IACLC,IAAI,WAENN,cAAA,OACE,cAAY,OACZC,UAAU,+CACVG,IAAKG,IACLD,IAAI,cAGRN,cAAA,QAAMC,UAAU,wDAAuDC,SACrEC,eAAA,OAAKF,UAAU,SAAQC,SAAA,CACrBF,cAAA,MAAIC,UAAU,8DAA6DC,SAAC,oBAI5EC,eAAA,QAAMvC,SAAUJ,EAAaI,GAAUsC,SAAA,CACrCF,cAACQ,IAAS,CAACC,MAAM,UACjBT,cAACU,IAAS,CACRnD,SAAUA,EACVkD,MAAM,QACN3C,KAAK,cACLmB,KAAK,QACL0B,YAAY,iBAEdX,cAACY,IAAK,CAACC,UAAWnD,EAAOM,cAEzBgC,cAACc,SAAM,CAACC,SAAUlE,EAASoC,KAAK,SAAS+B,OAAK,EAACf,UAAU,YAAWC,SAAC,wBAIvEF,cAAA,KAAGC,UAAU,OAAMC,SACjBF,cAACiB,IAAI,CACHhB,UAAU,yEACViB,GAAG,SAAQhB,SACZ,gDAQP,C","file":"static/js/5.f6d46b1a.chunk.js","sourcesContent":["// import Cookies from 'js-cookie';\n// import { useContext, useState } from 'react';\n// import { useForm } from 'react-hook-form';\n// import { useHistory, useLocation } from 'react-router-dom';\n// import { AdminContext } from 'context/AdminContext';\n// import AdminServices from 'services/AdminServices';\n// import { notifyError, notifySuccess } from 'utils/toast';\n\n// const useLoginSubmit = () => {\n//   const [loading, setLoading] = useState(false);\n//   const { dispatch } = useContext(AdminContext);\n//   const history = useHistory();\n//   const location = useLocation();\n//   const {\n//     register,\n//     handleSubmit,\n//     formState: { errors },\n//   } = useForm();\n\n//   const onSubmit = ({ name, email, verifyEmail, password, role }) => {\n//     setLoading(true);\n//     const cookieTimeOut = 0.5;\n\n//     if (location.pathname === '/login') {\n//       AdminServices.loginAdmin({ email, password })\n//         .then((res) => {\n//           if (res) {\n//             console.log('Login response:', res);\n//             Cookies.set('adminInfo', JSON.stringify(res), {\n//               expires: cookieTimeOut,\n//             });\n//           }\n//         })\n//         .catch((err) => {\n//           console.error('Login error:', err);\n//           notifyError(err ? err.response.data.message : err.message);\n//           setLoading(false);\n//         });\n//       setLoading(false);\n//       notifySuccess('Login Success!');\n//       dispatch({ type: 'USER_LOGIN', payload: { email: email } });\n//       localStorage.setItem(\"email\", email)\n//       history.replace('/');\n//     }\n\n//     if (location.pathname === '/signup') {\n//       AdminServices.registerAdmin({ name, email, password, role })\n//         .then((res) => {\n//           if (res) {\n//             setLoading(false);\n//             notifySuccess('Register Success!');\n//             dispatch({ type: 'USER_LOGIN', payload: res });\n//             Cookies.set('adminInfo', JSON.stringify(res), {\n//               expires: cookieTimeOut,\n//             });\n//             history.replace('/');\n//           }\n//         })\n//         .catch((err) => {\n//           notifyError(err ? err.response.data.message : err.message);\n//           setLoading(false);\n//         });\n//     }\n\n//     if (location.pathname === '/forgot-password') {\n//       AdminServices.forgetPassword({ verifyEmail })\n//         .then((res) => {\n//           setLoading(false);\n//           notifySuccess(res.message);\n//         })\n//         .catch((err) => {\n//           setLoading(false);\n//           notifyError(err ? err.response.data.message : err.message);\n//         });\n//     }\n//   };\n//   return {\n//     onSubmit,\n//     register,\n//     handleSubmit,\n//     errors,\n//     loading,\n//   };\n// };\n\n// export default useLoginSubmit;\n\n\n\n// just trying to make user stay at login when its correct from tokens \nimport Cookies from 'js-cookie';\nimport { useContext, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { AdminContext } from 'context/AdminContext';\nimport AdminServices from 'services/AdminServices';\nimport { notifyError, notifySuccess } from 'utils/toast';\n\nconst useLoginSubmit = () => {\n  const [loading, setLoading] = useState(false);\n  const { dispatch } = useContext(AdminContext);\n  const history = useHistory();\n  const location = useLocation();\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm();\n\n  const onSubmit = ({ name, email, verifyEmail, password, role }) => {\n    setLoading(true);\n    const cookieTimeOut = 0.5;\n\n    if (location.pathname === '/login') {\n      AdminServices.loginAdmin({ email, password })\n        .then((res) => {\n          if (res && res.token) {\n            console.log('Login response:', res);\n            Cookies.set('adminInfo', JSON.stringify(res), {\n              expires: cookieTimeOut,\n            });\n            setLoading(false);\n            notifySuccess('Login Success!');\n            // dispatch({ type: 'USER_LOGIN', payload: { email: email } });\n            dispatch({ type: 'USER_LOGIN', payload: { token: res.token } });\n            localStorage.setItem(\"email\", email)\n            history.replace('/');\n          }\n        })\n        .catch((err) => {\n          console.error('Login error:', err);\n          notifyError(err ? err.response.data.message : err.message);\n          setLoading(false);\n        });\n    }\n\n    if (location.pathname === '/signup') {\n      AdminServices.registerAdmin({ name, email, password, role })\n        .then((res) => {\n          if (res) {\n            setLoading(false);\n            notifySuccess('Register Success!');\n            dispatch({ type: 'USER_LOGIN', payload: res });\n            Cookies.set('adminInfo', JSON.stringify(res), {\n              expires: cookieTimeOut,\n            });\n            history.replace('/');\n          }\n        })\n        .catch((err) => {\n          notifyError(err ? err.response.data.message : err.message);\n          setLoading(false);\n        });\n    }\n\n    if (location.pathname === '/forgot-password') {\n      AdminServices.forgetPassword({ verifyEmail })\n        .then((res) => {\n          setLoading(false);\n          notifySuccess(res.message);\n        })\n        .catch((err) => {\n          setLoading(false);\n          notifyError(err ? err.response.data.message : err.message);\n        });\n    }\n  };\n  return {\n    onSubmit,\n    register,\n    handleSubmit,\n    errors,\n    loading,\n  };\n};\n\nexport default useLoginSubmit;\n","export default __webpack_public_path__ + \"static/media/forgot-password-office.d1630a33.jpeg\";","export default __webpack_public_path__ + \"static/media/forgot-password-office-dark.d1630a33.jpeg\";","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Button } from \"@windmill/react-ui\";\n\nimport Error from \"components/form/Error\";\nimport useLoginSubmit from \"hooks/useLoginSubmit\";\nimport LabelArea from \"components/form/LabelArea\";\nimport InputArea from \"components/form/InputArea\";\nimport ImageLight from \"assets/img/forgot-password-office.jpeg\";\nimport ImageDark from \"assets/img/forgot-password-office-dark.jpeg\";\n\nconst ForgotPassword = () => {\n  const { onSubmit, register, handleSubmit, errors, loading } = useLoginSubmit();\n\n  return (\n    <div className=\"flex items-center min-h-screen p-6 bg-gray-50 dark:bg-gray-900\">\n      <div className=\"flex-1 h-full max-w-4xl mx-auto overflow-hidden bg-white rounded-lg shadow-xl dark:bg-gray-800\">\n        <div className=\"flex flex-col overflow-y-auto md:flex-row\">\n          <div className=\"h-32 md:h-auto md:w-1/2\">\n            <img\n              aria-hidden=\"true\"\n              className=\"object-cover w-full h-full dark:hidden\"\n              src={ImageLight}\n              alt=\"Office\"\n            />\n            <img\n              aria-hidden=\"true\"\n              className=\"hidden object-cover w-full h-full dark:block\"\n              src={ImageDark}\n              alt=\"Office\"\n            />\n          </div>\n          <main className=\"flex items-center justify-center p-6 sm:p-12 md:w-1/2\">\n            <div className=\"w-full\">\n              <h1 className=\"mb-4 text-xl font-semibold text-gray-700 dark:text-gray-200\">\n                Forgot password\n              </h1>\n\n              <form onSubmit={handleSubmit(onSubmit)}>\n                <LabelArea label=\"Email\" />\n                <InputArea\n                  register={register}\n                  label=\"Email\"\n                  name=\"verifyEmail\"\n                  type=\"email\"\n                  placeholder=\"john@doe.com\"\n                />\n                <Error errorName={errors.verifyEmail} />\n\n                <Button disabled={loading} type=\"submit\" block className=\"mt-4 h-12\">\n                  Recover password\n                </Button>\n              </form>\n              <p className=\"mt-4\">\n                <Link\n                  className=\"text-sm font-medium text-green-500 dark:text-green-400 hover:underline\"\n                  to=\"/login\"\n                >\n                  Already have an account? Login\n                </Link>\n              </p>\n            </div>\n          </main>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ForgotPassword;\n"],"sourceRoot":""}